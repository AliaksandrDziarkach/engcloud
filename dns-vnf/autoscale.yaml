heat_template_version: 2014-10-16
description: AutoScaling Infoblox DNS Service
parameters:
  external_network:
    type: string
    description: the network for the public floating IPs (with external GM)
    default: public-138-net
  wapi_url:
    type: string
    description: the URL to access the GM WAPI from the Heat engine
  wapi_username:
    type: string
    description: the username for the WAPI access
  wapi_password:
    type: string
    description: the username for the WAPI access
  wapi_sslverify:
    type: string
    description: the value for SSL Verify (true/false/certificate path)
    default: false
  gm_lan1_ip:
    type: string
    description: the LAN1 IP of the GM, to be used by members for joining the grid
  gm_cert:
    type: string
    description: the GM certificate contents
  min_members:
    type: number
    description: the minimum number of members to keep alive
    default: 0
  max_members:
    type: number
    description: the maximum number of members allowed in the stack
    default: 10
resources:
  nios_member_group:
    type: OS::Heat::AutoScalingGroup
    properties:
      min_size: {get_param: min_members}
      max_size: {get_param: max_members}
      resource:
        type: autoscale-member.yaml
        properties:
          gm_lan1_ip: {get_param: gm_lan1_ip}
          gm_cert: {get_param: gm_cert}
          external_network: {get_param: external_network}
          parent_stack_id: {get_param: "OS::stack_id"}
  scaleup_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: nios_member_group}
      cooldown: 900
      scaling_adjustment: 2
  scaledown_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: nios_member_group}
      cooldown: 9000
      scaling_adjustment: -1
  qps_alarm_high:
    type: OS::Ceilometer::Alarm
    properties:
      description: Scale up based on QPS
      meter_name: nios.dns.qps
      statistic: avg
      period: 120
      evaluation_periods: 1
      threshold: 5000
      alarm_actions:
        - {get_attr: [scaleup_policy, alarm_url]}
      matching_metadata: {'metadata.metering.stack': {get_param: "OS::stack_id"}, 'infoblox': 'true'}
      comparison_operator: gt
  qps_alarm_low:
    type: OS::Ceilometer::Alarm
    properties:
      description: Scale down based on QPS
      meter_name: nios.dns.qps
      statistic: avg
      period: 1200
      evaluation_periods: 10
      threshold: 1000
      alarm_actions:
        - {get_attr: [scaledown_policy, alarm_url]}
      matching_metadata: {'metadata.metering.stack': {get_param: "OS::stack_id"}, 'infoblox': 'true'}
      comparison_operator: lt
  host_name:
    type: OS::Heat::RandomString
    properties:
      length: 12
      sequence: lowercase

# We pre-allocate the port for LAN1, so that we have the IP address already for
# injection via user_data
  lan1_port:
    type: OS::Neutron::Port
    properties:
      network: protocol-net
      security_groups: [ Infoblox ]

# Each member needs a floating IP so Ceilometer can poll the member for QPS.
  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: external_network }
      port_id: { get_resource: lan1_port }

  grid_member:
    type: Infoblox::Grid::Member
    properties:
      connection: {url: {get_param: wapi_url}, username: {get_param: wapi_username}, password: {get_param: wapi_password}, sslverify: {get_param: wapi_sslverify}}
      name: { list_join: [ '.', [{ list_join: [ '-', [ 'member-dns', { get_resource: host_name } ]] }, 'localdomain' ]] }
      model: { get_param: model }
# the MGMT interface configuration is not yet supported
      LAN1: { get_resource: lan1_port }
      dns: { enable: True }
      temp_licenses: ["vnios", "dns", "enterprise", "rpz"]
      gm_ip: { get_param: gm_vip }
      gm_certificate: { get_param: gm_cert }
      remote_console_enabled: true
      admin_password: infoblox

  grid_member_ns_group_entry:
    type: Infoblox::Grid::NameServerGroupMember
    properties:
      connection: {url: {get_param: wapi_url}, username: {get_param: wapi_username}, password: {get_param: wapi_password}, sslverify: {get_param: wapi_sslverify}}
      group_name: default
      member_role: grid_secondary
      member_server: { name: { get_attr: [grid_member, name] } }

  server:
    type: OS::Nova::Server
    properties:
      name: { list_join: [ '-', [ 'member-dns', { get_resource: host_name } ]] }
      flavor: { get_param: flavor }
      image: { get_param: image }
      networks: [{network: mgmt-net }, {port: { get_resource: lan1_port}} ]
      metadata: {"metering.stack": {get_param: parent_stack_id}, 'infoblox': 'true'}
      config_drive: true
      user_data_format: RAW
      user_data: { get_attr: [grid_member, user_data] }
